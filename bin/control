#!/bin/bash

STOPTIMEOUT=10
FMT="%a %b %d %Y %H:%M:%S GMT%z (%Z)"

function is_go_service_running() {
    if [ -f $OPENSHIFT_GO_PID_DIR/node.pid ]; then
        node_pid=$( cat $OPENSHIFT_GO_DIR/pid/go.pid 2> /dev/null )
        myid=$( id -u )
        if `ps --pid $node_pid 2>&1 | grep node > /dev/null 2>&1`  ||  \
           `pgrep -x node -u $myid > /dev/null 2>&1`; then
            return 0
        fi
    fi

    return 1

}  #  End of function  _is_node_running.

function status() {
    if [ is_node_service_running ]; then
        client_result "Application is running"
    else
        client_result "Application is not running"
    fi
}  #  End of function  status.


function start() {
    envf="$OPENSHIFT_GO_DIR/configuration/go.env"
    logf="$OPENSHIFT_GO_LOG_DIR/go.log"

    #  Source environment if it exists.
    [ -f "$envf" ]  &&  source "$envf"

    #  Ensure we have script file.
    #node_app=${node_app:-"server.js"}

    #if [ ! -h "$OPENSHIFT_REPO_DIR/../node_modules" ]; then
    #   ln -s ../../nodejs-0.6/node_modules $OPENSHIFT_REPO_DIR/../node_modules
    #fi

    pushd "$OPENSHIFT_REPO_DIR" > /dev/null
    {
        echo "`date +"$FMT"`: Starting application '$OPENSHIFT_APP_NAME' ..."
        if [ ! -f "$OPENSHIFT_REPO_DIR/package.json" ]; then
            echo "    Script       = $node_app"
            echo "    Script Args  = $node_app_args"
            echo "    Node Options = $node_opts"
        fi
    } >> $logf


    #if [ -f "$OPENSHIFT_REPO_DIR/.openshift/markers/hot_deploy" ]; then
    #    nohup supervisor -e 'node|js|coffee' -- $script_n_opts  >> $logf 2>&1 &
    #else
    #    nohup $executor_cmdline >> $logf 2>&1 &
    #fi

    ret=$?
    npid=$!
    popd > /dev/null
    if [ $ret -eq 0 ]; then
        echo "$npid" > "$OPENSHIFT_GO_DIR/pid/go.pid"
    else
        echo "Application '$OPENSHIFT_APP_NAME' failed to start - $ret" 1>&2
    #    exit $ret
    fi
}


function stop() {
    if [ -f $OPENSHIFT_GO_DIR/pid/go.pid ]; then
        go_pid=$( cat $OPENSHIFT_GO_DIR/pid/go.pid 2> /dev/null )
    fi

    if [ -n "$go_pid" ]; then
        logf="$OPENSHIFT_GO_LOG_DIR/node.log"
        echo "`date +"$FMT"`: Stopping application '$OPENSHIFT_APP_NAME' ..." >> $logf
        /bin/kill $go_pid
        ret=$?
        if [ $ret -eq 0 ]; then
            TIMEOUT="$STOPTIMEOUT"
            while [ $TIMEOUT -gt 0 ] && is_go_service_running ; do
                /bin/kill -0 "$go_pid" >/dev/null 2>&1 || break
                sleep 1
                let TIMEOUT=${TIMEOUT}-1
            done
        fi

        echo "`date +"$FMT"`: Stopped Go application '$OPENSHIFT_APP_NAME'" >> $logf
        rm -f $OPENSHIFT_GO_PID_DIR/node.pid
    else
        if `pgrep -x node -u $(id -u)  > /dev/null 2>&1`; then
            echo "Warning: Application '$OPENSHIFT_APP_NAME' server exists without a pid file.  Use force-stop to kill." 1>&2
        fi
    fi
}


function restart() {
    stop
    start
}

function build() {
    ${OPENSHIFT_GO_DIR}/bin/compile ${OPENSHIFT_REPO_DIR} ${OPENSHIFT_GO_DIR}/cache
}

function post-deploy() {
    #
    echo 'noop'
}

function pre-build() {
    #
    echo 'noop'
}

function tidy() {
  client_message "Emptying log dir: $OPENSHIFT_GO_LOG_DIR"
  shopt -s dotglob
  rm -rf $OPENSHIFT_GO_LOG_DIR/*
  rm -rf ${OPENSHIFT_GO_DIR}tmp/*
}

#
#  main():
#

# Ensure arguments.
if ! [ $# -eq 1 ]; then
    echo "Usage: $0 [start|restart|graceful|graceful-stop|stop|status]"
    exit 1
fi

# Source utility functions.
source $OPENSHIFT_CARTRIDGE_SDK_BASH

# Handle commands.
case "$1" in
    start)               start       ;;
    restart|graceful)    restart     ;;
    graceful-stop|stop)  stop        ;;
    status)              status      ;;
    build)               build       ;;
    pre-build)           pre-build   ;;
    post-deploy)         post-deploy ;;
    tidy)                tidy        ;;
    *) exit 0;
esac

